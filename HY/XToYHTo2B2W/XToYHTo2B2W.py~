import pandas as pd
import numpy as np
import requests
import re
import csv
import copy
from os import path

def GetGridpacksAndDataset(gp, t_datasetname, res, mX, mY, verbose):
    gridpacks = copy.deepcopy(gp)
    gridpacks = gridpacks.replace("<massX>",str(mX)).replace("<massY>", str(mY))
    ### Check if gridpacks exist            
    gr_exists = path.exists(gridpacks)
    if (not gr_exists):
        print("[%s] Path %s does not exist!" % (res, gridpacks))
        gridpacks = None
    dataset_name = copy.deepcopy(t_datasetname)
    dataset_name = dataset_name.replace("<massX>",str(mX)).replace("<massY>", str(mY))
    
    note = dataset_name.replace('_',' ')

    if verbose: print("=== [%s, mX = %s, mY = %s] Dataset name: %s" % (res, mX, mY, dataset_name))
        
    return gridpacks, dataset_name, note

def GetFragments(LHEproducer, pythia_fragment_CP5, gridpacks, verbose):
    t_LHEproducer = copy.deepcopy(LHEproducer)
    final_fragment = t_LHEproducer.replace('__GRIDPACK__',gridpacks) + '\n' + pythia_fragment_CP5
    if verbose: print("=== final fragment: \n %s" % (final_fragment))
    return final_fragment
    

# fragments
pythia_fragment_CP5 = {}

# https://github.com/cms-sw/genproductions/blob/master/genfragments/ThirteenTeV/Higgs/HY/ResonanceDecayFilter_example_HY_XToYH_HTo2WTo2Q1L1Nu_YTo2B.py
pythia_fragment_CP5['Ybb_HWW-SL'] = """
from Configuration.Generator.Pythia8CommonSettings_cfi import *
from Configuration.Generator.MCTunes2017.PythiaCP5Settings_cfi import *
from Configuration.Generator.PSweightsPythia.PythiaPSweightsSettings_cfi import *

generator = cms.EDFilter("Pythia8ConcurrentHadronizerFilter",
    maxEventsToPrint = cms.untracked.int32(1),
    pythiaPylistVerbosity = cms.untracked.int32(1),
    filterEfficiency = cms.untracked.double(1.0),
    pythiaHepMCVerbosity = cms.untracked.bool(False),
    comEnergy = cms.double(13000.),
    PythiaParameters = cms.PSet(
        pythia8CommonSettingsBlock,
        pythia8CP5SettingsBlock,
        pythia8PSweightsSettingsBlock,
        processParameters = cms.vstring(
            '25:onMode = off', # Turn off all H decays
            '25:oneChannel = 1 1 100 24 -24', # H->W+ W-
            '25:onIfMatch = 24 -24',
            '35:onMode = off',
            '35:oneChannel = 1 1 100 5 -5',  # Y->b b~
            '35:onIfMatch = 5 -5',
            '15:onMode = on', # allow all tau decays. Leptonic and Hadronic
            '24:mMin = 0.05', # the lower limit of the allowed mass range generated by the Breit-Wigner (in GeV)
            '24:onMode = off', # Turn off all W decays
            '24:onIfAny = 1 2 3 4 5 11 13 15', # Add W->enu, W->munu, W->taunu. Add W->qq decays
            'ResonanceDecayFilter:filter = on',
            'ResonanceDecayFilter:exclusive = on', #off: require at least the specified number of daughters, on: require exactly the specified number of daughters
            'ResonanceDecayFilter:eMuTauAsEquivalent = on', #on: treat electrons, muons , and taus as equivalent
            'ResonanceDecayFilter:allNuAsEquivalent  = on', #on: treat all three neutrino flavours as equivalent
            'ResonanceDecayFilter:udscAsEquivalent  = on',  #on: treat udsc quarks as equivalent
            'ResonanceDecayFilter:mothers = 35,25,24', #list of mothers not specified -> count all particles in hard process+resonance decays (better to avoid specifying mothers when including leptons from the lhe in counting, since intermediate resonances are not gauranteed to appear in general
            'ResonanceDecayFilter:daughters = 5,5,1,1,11,12', # qq,lnu,gg
          ),
        parameterSets = cms.vstring('pythia8CommonSettings',
                                    'pythia8CP5Settings',
                                    'pythia8PSweightsSettings',
                                    'processParameters')
    )
)
""" 

# https://github.com/cms-sw/genproductions/blob/master/genfragments/ThirteenTeV/Higgs/HY/ResonanceDecayFilter_example_HY_XToYH_HTo2WTo2L2Nu_YTo2B.py
pythia_fragment_CP5['Ybb_HWW-FL'] = """
from Configuration.Generator.Pythia8CommonSettings_cfi import *
from Configuration.Generator.MCTunes2017.PythiaCP5Settings_cfi import *
from Configuration.Generator.PSweightsPythia.PythiaPSweightsSettings_cfi import *

generator = cms.EDFilter("Pythia8ConcurrentHadronizerFilter",
    maxEventsToPrint = cms.untracked.int32(1),
    pythiaPylistVerbosity = cms.untracked.int32(1),
    filterEfficiency = cms.untracked.double(1.0),
    pythiaHepMCVerbosity = cms.untracked.bool(False),
    comEnergy = cms.double(13000.),
    PythiaParameters = cms.PSet(
        pythia8CommonSettingsBlock,
        pythia8CP5SettingsBlock,
        pythia8PSweightsSettingsBlock,
        processParameters = cms.vstring(
            '25:onMode = off', # Turn off all H decays
            '25:oneChannel = 1 1 100 24 -24', # H->W+ W-
            '25:onIfMatch = 24 -24',
            '35:onMode = off',
            '35:oneChannel = 1 1 100 5 -5',  # Y->b b~
            '35:onIfMatch = 5 -5',
            '15:onMode = on', # allow all tau decays. Leptonic and Hadronic
            '24:mMin = 0.05', # the lower limit of the allowed mass range generated by the Breit-Wigner (in GeV)
            '24:onMode = off', # Turn off all W decays
            '24:onIfAny = 11 13 15', # Add W->enu, W->munu, W->taunu. Add W->qq decays
            'ResonanceDecayFilter:filter = on',
            'ResonanceDecayFilter:exclusive = on', #off: require at least the specified number of daughters, on: require exactly the specified number of daughters
            'ResonanceDecayFilter:eMuTauAsEquivalent = on', #on: treat electrons, muons , and taus as equivalent
            'ResonanceDecayFilter:allNuAsEquivalent  = on', #on: treat all three neutrino flavours as equivalent
            'ResonanceDecayFilter:udscAsEquivalent  = on',  #on: treat udsc quarks as equivalent
            'ResonanceDecayFilter:mothers = 35,25,24', #list of mothers not specified -> count all particles in hard process+resonance decays (better to avoid specifying mothers when including leptons from the lhe in counting, since intermediate resonances are not gauranteed to appear in general
            'ResonanceDecayFilter:daughters = 5,5,11,12,11,12', # qq,lnu,lnu
          ),
        parameterSets = cms.vstring('pythia8CommonSettings',
                                    'pythia8CP5Settings',
                                    'pythia8PSweightsSettings',
                                    'processParameters')
    )
)
"""

# https://github.com/cms-sw/genproductions/blob/master/genfragments/ThirteenTeV/Higgs/HY/ResonanceDecayFilter_example_HY_XToYH_HTo2B_YTo2WTo2Q1L1Nu.py
pythia_fragment_CP5['YWW_Hbb-SL'] = """
from Configuration.Generator.Pythia8CommonSettings_cfi import *
from Configuration.Generator.MCTunes2017.PythiaCP5Settings_cfi import *
from Configuration.Generator.PSweightsPythia.PythiaPSweightsSettings_cfi import *

generator = cms.EDFilter("Pythia8ConcurrentHadronizerFilter",
    maxEventsToPrint = cms.untracked.int32(1),
    pythiaPylistVerbosity = cms.untracked.int32(1),
    filterEfficiency = cms.untracked.double(1.0),
    pythiaHepMCVerbosity = cms.untracked.bool(False),
    comEnergy = cms.double(13000.),
    PythiaParameters = cms.PSet(
        pythia8CommonSettingsBlock,
        pythia8CP5SettingsBlock,
        pythia8PSweightsSettingsBlock,
        processParameters = cms.vstring(
            '25:onMode = off', # Turn off all H decays
            '25:oneChannel = 1 1 100 5 -5', # H->b b~
            '25:onIfMatch = 5 -5',
            '35:onMode = off',
            '35:oneChannel = 1 1 100 24 -24',  # Y->WW
            '35:onIfMatch = 24 -24',
            '15:onMode = on', # allow all tau decays. Leptonic and Hadronic
            '24:mMin = 0.05', # the lower limit of the allowed mass range generated by the Breit-Wigner (in GeV)
            '24:onMode = off', # Turn off all W decays
            '24:onIfAny = 1 2 3 4 5 11 13 15', # Add W->enu, W->munu, W->taunu. Add W->qq decays
            'ResonanceDecayFilter:filter = on',
            'ResonanceDecayFilter:exclusive = on', #off: require at least the specified number of daughters, on: require exactly the specified number of daughters
            'ResonanceDecayFilter:eMuTauAsEquivalent = on', #on: treat electrons, muons , and taus as equivalent
            'ResonanceDecayFilter:allNuAsEquivalent  = on', #on: treat all three neutrino flavours as equivalent
            'ResonanceDecayFilter:udscAsEquivalent  = on',  #on: treat udsc quarks as equivalent
            'ResonanceDecayFilter:mothers = 35,25,24', #list of mothers not specified -> count all particles in hard process+resonance decays (better to avoid specifying mothers when including leptons from the lhe in counting, since intermediate resonances are not gauranteed to appear in general
            'ResonanceDecayFilter:daughters = 5,5,1,1,11,12', # qq,lnu,gg
          ),
        parameterSets = cms.vstring('pythia8CommonSettings',
                                    'pythia8CP5Settings',
                                    'pythia8PSweightsSettings',
                                    'processParameters')
    )
)
"""

# https://github.com/cms-sw/genproductions/blob/master/genfragments/ThirteenTeV/Higgs/HY/ResonanceDecayFilter_example_HY_XToYH_HTo2B_YTo2WTo2L2Nu.py
pythia_fragment_CP5['YWW_Hbb-FL'] = """
from Configuration.Generator.Pythia8CommonSettings_cfi import *
from Configuration.Generator.MCTunes2017.PythiaCP5Settings_cfi import *
from Configuration.Generator.PSweightsPythia.PythiaPSweightsSettings_cfi import *

generator = cms.EDFilter("Pythia8HadronizerFilter",
    maxEventsToPrint = cms.untracked.int32(1),
    pythiaPylistVerbosity = cms.untracked.int32(1),
    filterEfficiency = cms.untracked.double(1.0),
    pythiaHepMCVerbosity = cms.untracked.bool(False),
    comEnergy = cms.double(13000.),
    PythiaParameters = cms.PSet(
        pythia8CommonSettingsBlock,
        pythia8CP5SettingsBlock,
        pythia8PSweightsSettingsBlock,
        processParameters = cms.vstring(
            '25:onMode = off', # Turn off all H decays
            '25:oneChannel = 1 1 100 5 -5', # H->b b~
            '25:onIfMatch = 5 -5',
            '35:onMode = off',
            '35:oneChannel = 1 1 100 24 -24',  # Y->WW
            '35:onIfMatch = 24 -24',
            '15:onMode = on', # allow all tau decays. Leptonic and Hadronic
            '24:mMin = 0.05', # the lower limit of the allowed mass range generated by the Breit-Wigner (in GeV)
            '24:onMode = off', # Turn off all W decays
            '24:onIfAny = 11 13 15', # Add W->enu, W->munu, W->taunu. Add W->qq decays
            'ResonanceDecayFilter:filter = on',
            'ResonanceDecayFilter:exclusive = on', #off: require at least the specified number of daughters, on: require exactly the specified number of daughters
            'ResonanceDecayFilter:eMuTauAsEquivalent = on', #on: treat electrons, muons , and taus as equivalent
            'ResonanceDecayFilter:allNuAsEquivalent  = on', #on: treat all three neutrino flavours as equivalent
            'ResonanceDecayFilter:udscAsEquivalent  = on',  #on: treat udsc quarks as equivalent
            'ResonanceDecayFilter:mothers = 35,25,24', #list of mothers not specified -> count all particles in hard process+resonance decays (better to avoid specifying mothers when including leptons from the lhe in counting, since intermediate resonances are not gauranteed to appear in general
            'ResonanceDecayFilter:daughters = 5,5,11,12,11,12', # qq,lnu,lnu
          ),
        parameterSets = cms.vstring('pythia8CommonSettings',
                                    'pythia8CP5Settings',
                                    'pythia8PSweightsSettings',
                                    'processParameters')
    )
)
"""

LHEproducer = """
import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer("ExternalLHEProducer",
    args = cms.vstring('__GRIDPACK__'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh'),
    generateConcurrently = cms.untracked.bool(True)
)
"""
# Definitions
years   = ["2016", "2016APV", "2017", "2018"]
resType = ["Ybb_HWW-SL", "Ybb_HWW-FL", "YWW_Hbb-SL", "YWW_Hbb-FL"]

# Mass ranges (Following mX > mY = 125)
mX_list = [240, 280, 300, 320, 360, 400, 500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2500, 2600, 2800, 3000, 3500, 4000]
mY_list = [ 60, 70, 80, 90, 100, 125,150, 250, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1600, 1800, 2000, 2200, 2400, 2500, 2600, 2800]

tot_events = 400000
version    = "2.6.5"

t_datasetname = {}
t_datasetname["Ybb_HWW-SL"] = "NMSSM_XToYHTo2B2WTo2B2Q1L1Nu_MX-<massX>_MY-<massY>_TuneCP5_13TeV-madgraph-pythia8" #"NMSSM_XYH_Y_bb_H_WW_<decay>_MX_<massX>_MY_<massY>_TuneCP5_13TeV-madgraph-pythia8"
t_datasetname["Ybb_HWW-FL"] = "NMSSM_XToYHTo2B2WTo2B2L2Nu_MX-<massX>_MY-<massY>_TuneCP5_13TeV-madgraph-pythia8" #"NMSSM_XYH_Y_bb_H_WW_<decay>_MX_<massX>_MY_<massY>_TuneCP5_13TeV-madgraph-pythia8"
t_datasetname["YWW_Hbb-SL"] = "NMSSM_XToYHTo2W2BTo2Q1L1Nu2B_MX-<massX>_MY-<massY>_TuneCP5_13TeV-madgraph-pythia8" #"NMSSM_XYH_Y_WW_<decay>_H_bb_MX_[massX]_MY_[massY]_TuneCP5_13TeV-madgraph-pythia8"
t_datasetname["YWW_Hbb-FL"] = "NMSSM_XToYHTo2W2BTo2L2Nu2B_MX-<massX>_MY-<massY>_TuneCP5_13TeV-madgraph-pythia8" #"NMSSM_XYH_Y_WW_<decay>_H_bb_MX_[massX]_MY_[massY]_TuneCP5_13TeV-madgraph-pythia8"

gp = "/cvmfs/cms.cern.ch/phys_generator/gridpacks/UL/13TeV/madgraph/V5_2.6.5/NMSSM_XYH/NMSSM_XToYH_MX_<massX>_MY_<massY>/v1/NMSSM_XToYH_MX_<massX>_MY_<massY>_slc7_amd64_gcc700_CMSSW_10_6_19_tarball.tar.xz"    

generators="Madgraph_" + version + "  Pythia8"
mcdb_id = '0' 
time = '1.8' 
size = '120' 

resType = ["Ybb_HWW-SL", "Ybb_HWW-FL", "YWW_Hbb-SL", "YWW_Hbb-FL"]

prepIDFirst = {
    "2016-Ybb_HWW-FL" : 4658,
    "2016-Ybb_HWW-SL" : 5000,
    "2016-YWW_Hbb-FL" : 5342,
    "2016-YWW_Hbb-SL" : 5684,
    "2016APV-Ybb_HWW-FL" : 4190,
    "2016APV-Ybb_HWW-SL" : 4532,
    "2016APV-YWW_Hbb-FL" : 4874,
    "2016APV-YWW_Hbb-SL" : 5216,
    "2017-Ybb_HWW-FL" : 4562,
    "2017-Ybb_HWW-SL" : 4904,
    "2017-YWW_Hbb-FL" : 5246,
    "2017-YWW_Hbb-SL" : 5588,
    "2018-Ybb_HWW-FL" : 4621,
    "2018-Ybb_HWW-SL" : 4963,
    "2018-YWW_Hbb-FL" : 5305,
    "2018-YWW_Hbb-SL" : 5647,
}

prepIDLast = {
    "2016-Ybb_HWW-FL" : 4999,
    "2016-Ybb_HWW-SL" : 5341,
    "2016-YWW_Hbb-FL" : 5683,
    "2016-YWW_Hbb-SL" : 6025,
    "2016APV-Ybb_HWW-FL" : 4531,
    "2016APV-Ybb_HWW-SL" : 4873,
    "2016APV-YWW_Hbb-FL" : 5215,
    "2016APV-YWW_Hbb-SL" : 5557,
    "2017-Ybb_HWW-FL" : 4903,
    "2017-Ybb_HWW-SL" : 5245,
    "2017-YWW_Hbb-FL" : 5587,
    "2017-YWW_Hbb-SL" : 5929,
    "2018-Ybb_HWW-FL" : 4962,
    "2018-Ybb_HWW-SL" : 5304,
    "2018-YWW_Hbb-FL" : 5646,
    "2018-YWW_Hbb-SL" : 5988,
}


missingGP_txt = open("missingGridpacks_1.txt", "r")

for i, year in enumerate(years):
    print("year = ", year)
    counter = 0
    
    for res in resType:

        # Edit existing requests
        id_ = prepIDFirst["%s-%s" % (year, res)]

        with open("edit_"+res+'_'+year+'.csv', 'w') as csvfile:
            csvwriter = csv.writer(csvfile, delimiter=',',
                                   quotechar='"', quoting=csv.QUOTE_MINIMAL)
            #csvwriter.writerow(['Dataset name','Events', 'fragment','notes','Generator','mcdbid','time','size'])
            csvwriter.writerow(['prepid','Dataset name','Events', 'fragment','notes','Generator','mcdbid'])

            if year == "2016APV":
                events = int(round(tot_events*0.54))
                campaign = "HIG-RunIISummer20UL16wmLHEGENAPV-0"
            elif year == "2016":
                events = int(round(tot_events*0.46))
                campaign = "HIG-RunIISummer20UL16wmLHEGEN-0"
            elif year == "2017":
               events = int(tot_events)
               campaign = "HIG-RunIISummer20UL17wmLHEGEN-0"
            elif year == "2018":
                events = int(tot_events)
                campaign = "HIG-RunIISummer20UL18wmLHEGEN-0"

            # get mass ranges (Following mX > mY + 125)
            for mX in mX_list:
                for mY in mY_list:
                    if mX <= mY + 125: continue                    
                    gridpacks, dataset_name, note = GetGridpacksAndDataset(gp, t_datasetname[res], res, mX, mY, 0) # resType = ["Ybb_HWW-SL", "Ybb_HWW-FL", "YWW_Hbb-SL", "YWW_Hbb-FL"]
                    if (gridpacks == None): continue

                    # Exclude the missing mass points
                    missingGPExists = False
                    missingGP_txt = open("missingGridpacks_1.txt", "r")
                    for line in missingGP_txt:
                        #line = line.replace("\n","")
                        if re.search(gridpacks, line):
                            missingGPExists = True
                    if (missingGPExists == True):
                        #print("Path for gridpacks %s was missing in first submission. Will create them separately!" % gridpacks)
                        continue

                    counter = counter + 1
                    final_fragment = GetFragments(LHEproducer, pythia_fragment_CP5[res], gridpacks, 0)
                    
                    # prepID
                    prepid = campaign+str(id_)
                    #print("prepid = %s, datasetName = %s" % (prepid, dataset_name))

                    csvwriter.writerow([prepid, dataset_name, events, final_fragment, note, generators, mcdb_id, time, size])                            
                    
                    # if (year == "2017" and res == "Ybb_HWW-SL"): print("prepid = %s, datasetName = %s" % (prepid, dataset_name)) 
                    id_ = id_ + 1
                    
            
            #check last id
            if (id_ -1 == prepIDLast["%s-%s" % (year, res)]):                 
                print("Last prepid for process %s and year %s is matched!" % (res, year))                           
            
print("Datasets per year, process, decay", float(counter)/3)

# NMSSM_XToYH_MX_4000_MY_600_slc7_amd64_gcc700_CMSSW_10_6_19_tarball.tar.xz
